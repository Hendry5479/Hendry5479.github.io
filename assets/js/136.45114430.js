(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{500:function(t,s,n){"use strict";n.r(s);var a=n(45),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"_1-对-websocket-的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-对-websocket-的理解"}},[t._v("#")]),t._v(" 1. 对 WebSocket 的理解")]),t._v(" "),n("p",[t._v("WebSocket是HTML5提供的一种"),n("strong",[t._v("全双工通讯")]),t._v("的网络技术，属于应用层协议。")]),t._v(" "),n("p",[t._v("它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要一次握手，即可创建持久性连接， 进行双向传输。")]),t._v(" "),n("p",[t._v("WebSocket 解决了半双工通信的弊端。它最大的特点是："),n("strong",[t._v("双方均可主动推送")])]),t._v(" "),n("p",[n("strong",[t._v("WebSocket原理")]),t._v("：")]),t._v(" "),n("p",[t._v("客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），")]),t._v(" "),n("p",[t._v("服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。")]),t._v(" "),n("p",[t._v("**WebSocket 特点的如下：**数据格式轻量，性能开销小，通信高效")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("双向通信，实时性更强")])]),t._v(" "),n("li",[n("p",[t._v("文本或二进制数据")])]),t._v(" "),n("li",[n("p",[t._v("建立在TCP协议之上，服务端的实现比较容易")])]),t._v(" "),n("li",[n("p",[t._v("没有同源限制，客户端可以与任意服务器通信")])]),t._v(" "),n("li",[n("p",[t._v("协议标识符是ws（如果加密，则为wss），服务器网址就是 URL")])]),t._v(" "),n("li",[n("p",[t._v("与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")])])]),t._v(" "),n("p",[n("strong",[t._v("Websocket的使用方法如下：")])]),t._v(" "),n("p",[t._v("在客户端中：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在index.html中直接写WebSocket，设置服务端的端口号为 9999")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ws "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws://localhost:9999'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在客户端与服务端建立连接后触发")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection open."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    ws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在服务端给客户端发来消息的时候触发")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印的是MessageEvent对象")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印的是收到的消息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在客户端与服务端建立关闭后触发")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection closed."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n复制代码\n")])])]),n("h3",{attrs:{id:"_2-即时通讯的实现-短轮询、长轮询、sse-和-websocket-间的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-即时通讯的实现-短轮询、长轮询、sse-和-websocket-间的区别"}},[t._v("#")]),t._v(" 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？")]),t._v(" "),n("p",[t._v("短轮询和长轮询的目的都是用于实现即时通讯。")]),t._v(" "),n("p",[t._v("短轮询：请求响应")]),t._v(" "),n("p",[t._v("长轮询：请求，挂起，有更新或到达一定的时间限制再返回")]),t._v(" "),n("p",[t._v("SSE：服务器与浏览器约定，推送流数据，浏览器一直保持http连接，基于http协议的变通方法")]),t._v(" "),n("p",[t._v("WebSocket：html5的新协议，全双工。SSE如果浏览器发送信息就属于下一个请求了。")]),t._v(" "),n("p",[t._v("从性能的角度来看： "),n("strong",[t._v("WebSocket > 长连接（SEE） > 长轮询 > 短轮询")])]),t._v(" "),n("p",[t._v("兼容性问题，顺序就恰恰相反了： "),n("strong",[t._v("短轮询 > 长轮询 > 长连接（SEE） > WebSocket")])])])}),[],!1,null,null,null);s.default=e.exports}}]);