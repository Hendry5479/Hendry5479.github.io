(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{373:function(v,_,e){"use strict";e.r(_);var t=e(45),p=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[e("strong",[v._v("宏任务和微任务的理解")])]),v._v(" "),e("p",[v._v("es3的js代码只会由宿主（浏览器，node）发起任务，交由内存中的引擎执行")]),v._v(" "),e("p",[v._v("es5中，js代码也可以自发任务，让引擎执行")]),v._v(" "),e("p",[v._v("其中，宏任务为宿主发起任务，交由引擎执行；微任务则为js代码自发任务执行")]),v._v(" "),e("p",[e("strong",[v._v("为什么要有宏任务和微任务")])]),v._v(" "),e("p",[v._v("js是单线程，无法处理")]),v._v(" "),e("p",[e("strong",[v._v("事件循环")])]),v._v(" "),e("p",[v._v("客户端协调各种事件，控制触发时序的一种机制，而非js特有的产物。")]),v._v(" "),e("p",[e("strong",[v._v("浏览器的事件循环")])]),v._v(" "),e("p",[v._v("首先执行同步代码")]),v._v(" "),e("p",[v._v("执行的过程中遇到异步代码会放入任务队列里面，根据优先级的不同，可以划分为宏任务队列和微任务队列")]),v._v(" "),e("p",[v._v("宏任务包括setTimeout、setInterval、setImmediate、I/O、UI rendering，script同步代码")]),v._v(" "),e("p",[v._v("微任务包括process.nextTick、promise.then、Mutaition Oberver")]),v._v(" "),e("p",[v._v("执行同步代码后，执行栈为空。")]),v._v(" "),e("p",[v._v("执行完所有微任务")]),v._v(" "),e("p",[v._v("开始下一轮的事件循环，执行宏任务的代码。")]),v._v(" "),e("p",[e("strong",[v._v("Node的事件循环")])]),v._v(" "),e("p",[v._v("分为6个阶段，每个阶段反复执行，直到队列为空或回调数达到阈值")]),v._v(" "),e("p",[v._v("timer：setTimeout、setInterval定时任务")]),v._v(" "),e("p",[v._v("I/O：处理上一轮未执行的IO回调")]),v._v(" "),e("p",[v._v("idle, prepare：忽略")]),v._v(" "),e("p",[v._v("poll：关键步骤")]),v._v(" "),e("ul",[e("li",[v._v("回到timer执行回调")]),v._v(" "),e("li",[v._v("执行IO回调")]),v._v(" "),e("li",[v._v("没有timer：\n"),e("ul",[e("li",[v._v("队列不为空就执行清空队列")]),v._v(" "),e("li",[v._v("队列为空，有setImmediate就执行setImmediate回调，没有就等待")])])]),v._v(" "),e("li",[v._v("有timer且队列为空，就判断timer是否够钟，够钟就回到timer阶段执行回调")])]),v._v(" "),e("p",[v._v("check：执行setImmediate")]),v._v(" "),e("p",[v._v("close callbacks：执行close")]),v._v(" "),e("p",[v._v("宏任务和微任务有哪些")]),v._v(" "),e("p",[v._v("为什么es6要实现微任务：实现任务的优先级")]),v._v(" "),e("p",[v._v("在微任务里执行新的微任务，会在当前的tick中完成")]),v._v(" "),e("p",[v._v("setTimeout的准时实现")]),v._v(" "),e("p",[v._v("Promise.then链式调用返回旧的promise")]),v._v(" "),e("p",[v._v("promise")])])}),[],!1,null,null,null);_.default=p.exports}}]);