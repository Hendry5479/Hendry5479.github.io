(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{394:function(t,s,a){"use strict";a.r(s);var n=a(45),_=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"五、执行上下文-作用域链-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、执行上下文-作用域链-闭包"}},[t._v("#")]),t._v(" 五、执行上下文/作用域链/闭包")]),t._v(" "),a("h3",{attrs:{id:"_1-对闭包的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-对闭包的理解"}},[t._v("#")]),t._v(" 1. 对闭包的理解")]),t._v(" "),a("p",[a("strong",[t._v("闭包是指有权访问另一个函数作用域中变量的函数")]),t._v("，创建闭包的最常见的方式就是在一个函数内创建另一个函数")]),t._v(" "),a("p",[t._v("闭包有两个常用的用途")]),t._v(" "),a("ul",[a("li",[t._v("在函数外部访问到函数内部的变量，使用这种方法来"),a("strong",[t._v("创建私有变量")])]),t._v(" "),a("li",[t._v("使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收")])]),t._v(" "),a("p",[t._v("应用：")]),t._v(" "),a("h3",{attrs:{id:"_2-对作用域、作用域链的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对作用域、作用域链的理解"}},[t._v("#")]),t._v(" 2. 对作用域、作用域链的理解")]),t._v(" "),a("p",[a("strong",[t._v("作用域：有效范围")])]),t._v(" "),a("h5",{attrs:{id:"_1-全局作用域和函数作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局作用域和函数作用域"}},[t._v("#")]),t._v(" 1）全局作用域和函数作用域")]),t._v(" "),a("p",[t._v("（1）全局作用域")]),t._v(" "),a("p",[t._v("定义：最外层定义的变量，未定义直接复制的变量，window对象的属性，拥有的作用域")]),t._v(" "),a("p",[t._v("弊端：命名冲突")]),t._v(" "),a("p",[t._v("（2）函数作用域")]),t._v(" "),a("ul",[a("li",[t._v("函数内部的变量")]),t._v(" "),a("li",[t._v("分层，内层访问外层")])]),t._v(" "),a("h5",{attrs:{id:"_2-块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-块级作用域"}},[t._v("#")]),t._v(" 2）块级作用域")]),t._v(" "),a("ul",[a("li",[t._v("let和const声明的是块级作用域，块级作用域可以在函数中创建，也可以在代码块中创建（由 "),a("code",[t._v("{ }")]),t._v("包裹的代码片段）")]),t._v(" "),a("li",[t._v("let和const不会有变量提升，也不可以重复声明")]),t._v(" "),a("li",[t._v("在循环中比较适合绑定块级作用域，把计数器变量限制在循环内部")])]),t._v(" "),a("p",[a("strong",[t._v("作用域链")])]),t._v(" "),a("p",[t._v("如果在自己作用域找不到，就依次向上级作用域查找，直到window对象，就是作用域链")]),t._v(" "),a("p",[t._v("作用：可以访问外层变量，保证有序访问")]),t._v(" "),a("p",[a("strong",[t._v("保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。")])]),t._v(" "),a("p",[t._v("原理：")]),t._v(" "),a("p",[t._v("作用域链的本质是一个指向变量对象的指针列表")]),t._v(" "),a("p",[t._v("变量对象是一个包含了执行环境中所有变量和函数的对象。")]),t._v(" "),a("p",[t._v("作用域链的前端始终都是当前执行上下文的变量对象。")]),t._v(" "),a("p",[t._v("全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。")]),t._v(" "),a("p",[t._v("当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找")]),t._v(" "),a("h3",{attrs:{id:"_3-对执行上下文的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对执行上下文的理解"}},[t._v("#")]),t._v(" 3. 对执行上下文的理解")]),t._v(" "),a("h5",{attrs:{id:"_1-执行上下文类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行上下文类型"}},[t._v("#")]),t._v(" 1. 执行上下文类型")]),t._v(" "),a("p",[a("strong",[t._v("（1）全局执行上下文")])]),t._v(" "),a("p",[t._v("任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。")]),t._v(" "),a("p",[a("strong",[t._v("（2）函数执行上下文")])]),t._v(" "),a("p",[t._v("当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。")]),t._v(" "),a("p",[a("strong",[t._v("（3）")]),a("code",[t._v("eval")]),a("strong",[t._v("函数执行上下文")])]),t._v(" "),a("p",[t._v("执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。")]),t._v(" "),a("h5",{attrs:{id:"_2-执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行上下文栈"}},[t._v("#")]),t._v(" 2. 执行上下文栈")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript引擎使用执行上下文栈来管理执行上下文")]),t._v(" "),a("li",[t._v("当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside first function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Again inside first function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Inside second function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先执行second(),在执行first()")]),t._v("\n复制代码\n")])])]),a("h5",{attrs:{id:"_3-创建执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建执行上下文"}},[t._v("#")]),t._v(" 3. 创建执行上下文")]),t._v(" "),a("p",[t._v("创建执行上下文有两个阶段："),a("strong",[t._v("创建阶段")]),t._v("和"),a("strong",[t._v("执行阶段")])]),t._v(" "),a("p",[a("strong",[t._v("1）创建阶段")])]),t._v(" "),a("p",[t._v("（1）this绑定")]),t._v(" "),a("ul",[a("li",[t._v("在全局执行上下文中，this指向全局对象（window对象）")]),t._v(" "),a("li",[t._v("在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined")])]),t._v(" "),a("p",[t._v("（2）创建词法环境组件")]),t._v(" "),a("ul",[a("li",[t._v("词法环境是一种有"),a("strong",[t._v("标识符——变量映射")]),t._v("的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用")]),t._v(" "),a("li",[t._v("词法环境的内部有两个组件："),a("strong",[t._v("加粗样式")]),t._v("：环境记录器:用来储存变量个函数声明的实际位置"),a("strong",[t._v("外部环境的引用")]),t._v("：可以访问父级作用域")])]),t._v(" "),a("p",[t._v("（3）创建变量环境组件")]),t._v(" "),a("ul",[a("li",[t._v("变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。")])]),t._v(" "),a("p",[a("strong",[t._v("2）执行阶段")]),t._v(" 此阶段会完成对变量的分配，最后执行完代码。")]),t._v(" "),a("p",[a("strong",[t._v("简单来说执行上下文就是指：")])]),t._v(" "),a("p",[t._v("在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。")]),t._v(" "),a("p",[t._v("在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。")]),t._v(" "),a("ul",[a("li",[t._v("全局上下文：变量定义，函数声明")]),t._v(" "),a("li",[t._v("函数上下文：变量定义，函数声明，"),a("code",[t._v("this")]),t._v("，"),a("code",[t._v("arguments")])])])])}),[],!1,null,null,null);s.default=_.exports}}]);