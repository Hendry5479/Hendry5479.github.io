(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{384:function(t,s,e){"use strict";e.r(s);var r=e(45),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"理念篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理念篇"}},[t._v("#")]),t._v(" 理念篇")]),t._v(" "),e("h2",{attrs:{id:"_1-react16架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-react16架构"}},[t._v("#")]),t._v(" 1. React16架构")]),t._v(" "),e("p",[t._v("React15的缺点："),e("strong",[t._v("更新无法被中断")]),t._v("，中断会"),e("strong",[t._v("渲染不完全")]),t._v("，React16支持异步更新")]),t._v(" "),e("p",[e("strong",[t._v("Scheduler")]),t._v("和"),e("strong",[t._v("Reconciler")]),t._v("都是平台无关的，所以是单独发包的")]),t._v(" "),e("h3",{attrs:{id:"scheduler调度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheduler调度"}},[t._v("#")]),t._v(" Scheduler调度")]),t._v(" "),e("p",[e("strong",[t._v("调度任务的优先级，高优进入")]),t._v("Reconciler")]),t._v(" "),e("p",[e("strong",[t._v("以浏览器是否有剩余时间作为任务中断的标准")])]),t._v(" "),e("p",[t._v("需要一种机制，当浏览器有剩余时间时通知我们，浏览器实现了这个API：requestIdleCallback，但兼容性和不稳定而弃用")]),t._v(" "),e("p",[e("code",[t._v("React的Scheduler")]),t._v(" 就是实现了 "),e("code",[t._v("requestIdleCallback")]),t._v(" polyfill")]),t._v(" "),e("p",[t._v("除了在空闲时触发回调的功能外，"),e("strong",[t._v("Scheduler")]),t._v("还提供了多种调度优先级供任务设置")]),t._v(" "),e("h3",{attrs:{id:"reconciler协调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reconciler协调"}},[t._v("#")]),t._v(" Reconciler协调")]),t._v(" "),e("p",[t._v("负责找出变化的组件")]),t._v(" "),e("p",[e("strong",[t._v("从递归处理虚拟DOM，变成可中断的循环")])]),t._v(" "),e("p",[t._v("每次循环都会调用 "),e("code",[t._v("shouldYield")]),t._v("判断当前是否有剩余时间。")]),t._v(" "),e("p",[e("strong",[t._v("React16解决中断更新时DOM渲染不完全的问题")]),t._v("：")]),t._v(" "),e("p",[e("strong",[t._v("Reconciler")]),t._v("与"),e("strong",[t._v("Renderer")]),t._v("不再是交替工作。当"),e("strong",[t._v("Scheduler")]),t._v("将任务交给"),e("strong",[t._v("Reconciler")]),t._v("后，"),e("strong",[t._v("Reconciler")]),t._v("会为Fiber打上代表增/删/更新的标记")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Placement "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*             */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000010")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("strong",[t._v("Scheduler与Reconciler的工作都在内存中进行。")])]),t._v(" "),e("p",[e("strong",[t._v("只有当所有组件都完成Reconciler的工作，才会统一交给Renderer。")])]),t._v(" "),e("h3",{attrs:{id:"renderer渲染器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#renderer渲染器"}},[t._v("#")]),t._v(" Renderer渲染器")]),t._v(" "),e("p",[e("strong",[t._v("Renderer")]),t._v("根据"),e("strong",[t._v("Reconciler")]),t._v("打的标记"),e("strong",[t._v("effectTag")]),t._v("，同步执行DOM操作。")]),t._v(" "),e("p",[t._v("浏览器环境的Mutation指dom操作")]),t._v(" "),e("p",[t._v("![image-20211104234422329](/Users/hendry5479/Library/Application Support/typora-user-images/image-20211104234422329.png)")]),t._v(" "),e("p",[t._v("红框步骤随时可能因为高优或者当前帧没有剩余时间被中断：")]),t._v(" "),e("p",[t._v("红框的工作都在内存进行，不更新DOM，所以反复中断无感知")]),t._v(" "),e("h2",{attrs:{id:"_2-fiber结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-fiber结构"}},[t._v("#")]),t._v(" 2. Fiber结构")]),t._v(" "),e("p",[e("code",[t._v("React Fiber")]),t._v("可以理解为："),e("code",[t._v("React")]),t._v("的一套状态更新机制。支持任务 "),e("code",[t._v("优先级")]),t._v("，可中断恢复，恢复可复用中间状态。")]),t._v(" "),e("p",[t._v("Fiber节点是任务的更新单元")]),t._v(" "),e("p",[e("code",[t._v("Fiber")]),t._v("包含三层含义：树结构return和child和sibling，")]),t._v(" "),e("ol",[e("li",[t._v("架构：老 "),e("code",[t._v("Reconciler")]),t._v("递归执行，数据保存在递归调用栈。新Reconciler基于Fiber节点，"),e("code",[t._v("Fiber Reconciler")]),t._v("。")]),t._v(" "),e("li",[t._v("静态数据结构："),e("code",[t._v("Fiber节点")]),t._v("保存组件类型、DOM信息")]),t._v(" "),e("li",[t._v("动态工作单元：保存了改变的状态、DOM操作。")])]),t._v(" "),e("h3",{attrs:{id:"作为架构来说"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为架构来说"}},[t._v("#")]),t._v(" 作为架构来说")]),t._v(" "),e("p",[t._v("每个Fiber节点有对应的 "),e("code",[t._v("React element")]),t._v("，多个 "),e("code",[t._v("Fiber节点")]),t._v("是如何连接形成树呢？")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向父级Fiber节点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向子Fiber节点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向右边第一个兄弟Fiber节点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("为什么父级指针叫做 "),e("code",[t._v("return")]),t._v("？因为作为工作单元，"),e("strong",[e("code",[t._v("return")]),t._v("指节点执行完 "),e("code",[t._v("completeWork")]),t._v("后返回的下一个节点")]),t._v("。")]),t._v(" "),e("p",[t._v("子 "),e("code",[t._v("Fiber节点")]),t._v("及其兄弟节点完成工作后会返回其父级节点，所以用 "),e("code",[t._v("return")]),t._v("指代父级节点。")]),t._v(" "),e("h3",{attrs:{id:"作为静态的数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为静态的数据结构"}},[t._v("#")]),t._v(" 作为静态的数据结构")]),t._v(" "),e("p",[t._v("保存了组件相关的信息：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber对应组件的类型 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Function/Class/Host...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber对应的真实DOM节点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"作为动态的工作单元"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为动态的工作单元"}},[t._v("#")]),t._v(" 作为动态的工作单元")]),t._v(" "),e("p",[t._v("保存了本次更新相关的信息")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存本次更新造成的状态改变相关信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存本次更新会造成的DOM操作")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("如下两个字段保存调度优先级相关的信息，会在讲解 "),e("code",[t._v("Scheduler")]),t._v("时介绍。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度优先级相关")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childLanes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"_3-双缓存fiber树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-双缓存fiber树"}},[t._v("#")]),t._v(" 3. 双缓存Fiber树")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("React")]),t._v("中存在两棵 "),e("code",[t._v("Fiber树")]),t._v("。当前显示的 "),e("code",[t._v("current Fiber树")]),t._v("，正在内存中构建的 "),e("code",[t._v("workInProgress Fiber树")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("current fiber")]),t._v("和 "),e("code",[t._v("workInProgress fiber")]),t._v("，通过 "),e("code",[t._v("alternate")]),t._v("属性连接")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" workInProgressFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworkInProgressFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("code",[t._v("React")]),t._v("根节点通过"),e("strong",[t._v("使 "),e("code",[t._v("current")]),t._v("指针在不同 "),e("code",[t._v("rootFiber")]),t._v("间切换")]),t._v("完成 "),e("code",[t._v("current Fiber")]),t._v("树指向的切换，从而完成 "),e("code",[t._v("DOM")]),t._v("更新。")]),t._v(" "),e("h3",{attrs:{id:"mount时"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mount时"}},[t._v("#")]),t._v(" mount时")]),t._v(" "),e("ol",[e("li",[t._v("首次执行 "),e("code",[t._v("ReactDOM.render")]),t._v("会创建 "),e("code",[t._v("fiberRoot")]),t._v("和 "),e("code",[t._v("rootFiber")]),t._v("。")])]),t._v(" "),e("p",[t._v("在应用中会多次调用 "),e("code",[t._v("ReactDOM.render")]),t._v("，渲染出来不同的"),e("strong",[t._v("组件树")]),t._v("，他们会拥有不同的 "),e("code",[t._v("rootFiber")]),t._v("。")]),t._v(" "),e("p",[t._v("但是整个应用的根节点只有一个，那就是 "),e("code",[t._v("fiberRoot")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("fiberRoot")]),t._v("的 "),e("code",[t._v("current")]),t._v("指向当前页对应的 "),e("code",[t._v("current Fiber树")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("fiberRootNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rootFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("首屏渲染，"),e("code",[t._v("fiberRootNode.current")]),t._v("指向的 "),e("code",[t._v("rootFiber")]),t._v("没有任何 "),e("code",[t._v("子Fiber节点")]),t._v("（即 "),e("code",[t._v("current Fiber树")]),t._v("为空）")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("之后进入 "),e("code",[t._v("render阶段")]),t._v("，根据组件返回的 "),e("code",[t._v("JSX")]),t._v("在内存中依次创建 "),e("code",[t._v("Fiber节点")]),t._v("并构建 "),e("code",[t._v("workInProgress Fiber树")])])]),t._v(" "),e("p",[t._v("在构建 "),e("code",[t._v("workInProgress树")]),t._v("时会尝试复用 "),e("code",[t._v("current Fiber树")]),t._v("中已有的 "),e("code",[t._v("Fiber节点")]),t._v("内的属性")]),t._v(" "),e("p",[e("strong",[t._v("在 "),e("code",[t._v("首屏渲染")]),t._v("时只有 "),e("code",[t._v("rootFiber")]),t._v("存在对应的 "),e("code",[t._v("current fiber")])]),t._v("（即 "),e("code",[t._v("rootFiber.alternate")]),t._v("）")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("已构建完的 "),e("code",[t._v("workInProgress Fiber树")]),t._v("在 "),e("code",[t._v("commit阶段")]),t._v("渲染到页面。")])]),t._v(" "),e("p",[e("strong",[t._v("渲染完毕后 "),e("code",[t._v("fiberRoot")]),t._v("的 "),e("code",[t._v("current")]),t._v("指针指向切换。")])]),t._v(" "),e("h3",{attrs:{id:"update时"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update时"}},[t._v("#")]),t._v(" update时")]),t._v(" "),e("ol",[e("li",[t._v("状态改变开启新的 "),e("code",[t._v("render阶段")]),t._v("并构建新的 "),e("code",[t._v("workInProgress树")])])]),t._v(" "),e("p",[t._v("和 "),e("code",[t._v("mount")]),t._v("时一样，"),e("code",[t._v("workInProgress fiber")]),t._v("的创建可以复用 "),e("code",[t._v("current Fiber树")]),t._v("对应的节点数据。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[t._v("workInProgress树")]),t._v("在 "),e("code",[t._v("render阶段")]),t._v("完成构建后进入 "),e("code",[t._v("commit阶段")]),t._v("渲染到页面上。渲染完毕后fiberRoot指针切换。")])])])}),[],!1,null,null,null);s.default=a.exports}}]);